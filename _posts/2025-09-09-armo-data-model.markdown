---
title: "Armo 개발 단계 #1 — 데이터 모델 스케치 & 마이그레이션"
description: "Armo 프로젝트 1단계: 핵심 데이터 모델을 스케치하고 데이터베이스 마이그레이션을 실행하는 과정"
keywords: ["Armo", "개발 단계", "데이터 모델", "마이그레이션", "Supabase", "Prisma", "Fastify", "Next.js"]
author: "Jerome Na"
date: 2025-09-09
---

Armo 웹사이트의 개발은 **MVP(최소 기능 제품)** 단계부터 차근차근 진행한다.  
그 첫 번째 핵심 작업은 **데이터 모델 스케치 & 마이그레이션**이다.  

## 왜 데이터 모델부터 시작할까?

웹사이트의 모든 콘텐츠(작가, 작품, 굿즈, 스토리, 저널 등)는 **데이터베이스 스키마**를 기반으로 저장되고 관리된다.  
즉, 데이터 모델을 명확히 정의하지 않으면 이후 개발 단계에서 혼란이 발생하고, 확장성에도 제약이 생긴다.

Armo는 작품을 단순히 판매하는 사이트가 아니라,  
**작품을 스토리텔링하며 굿즈로 확장하는 브랜드 플랫폼**을 목표로 하기 때문에, 데이터 모델링이 특히 중요하다.

---

## 1. 핵심 테이블 정의

MVP 단계에서는 다음의 주요 테이블을 정의한다.

- **artists**: 작가 정보 (이름, 약력, 프로필, 대표 문구 등)
- **artworks**: 작품 정보 (제목, 연도, 매체, 스토리, 모티브 등)
- **goods**: 굿즈 (에코백, 키링, 파우치 등 단품)

- ...

---

## 2. 공통 필드 설계

모든 콘텐츠 테이블에는 다음과 같은 공통 필드를 둔다.

- **id**: 고유 식별자
- **slug**: URL-friendly 식별자
- **status**: `draft | scheduled | published` (콘텐츠 상태)
- **publish_at**: 예약 발행 시간
- **created_at / updated_at**: 생성 및 수정 시각

---

## 3. 관계(리레이션) 설계

Armo의 데이터 구조는 단순히 단일 엔티티가 아니라 **관계형 구조**이다:

- 작품 ↔ 굿즈: **다대다(Many-to-Many)**  
  (한 작품이 여러 굿즈로 확장, 하나의 굿즈도 여러 작품과 연결 가능)
- 패키지 → 굿즈: **다중 참조**  
  (하나의 패키지는 여러 굿즈를 포함)

---

## 4. 마이그레이션 도구 선택

스키마 정의 후, 데이터베이스에 반영하기 위해 마이그레이션 도구를 사용한다.

- **Prisma**: 타입 세이프 ORM, 스키마 중심 개발에 유리  
- **Kysely**: 경량 SQL 빌더, 직접 제어가 많은 경우 적합  

이번 단계에서는 **Prisma**를 선택해 마이그레이션을 실행한다.

```bash
pnpm add -D prisma
pnpm prisma init
pnpm prisma migrate dev --name init
```

---

## 5. 완료 기준 (DoD)

- pnpm prisma migrate dev 명령어 실행 성공
- 로컬 DB에서 artists / artworks / goods / packages 테이블이 생성됨
- 기본 CRUD(Create, Read, Update, Delete) 작업이 정상 동작

---

### 6. 앞으로의 연결 단계

데이터 모델이 안정되면 이후 단계에서 다음 작업으로 이어진다.

1. API 서버 스캐폴딩 (Fastify 기반) → CRUD 엔드포인트 제공
2. 콘텐츠 CRUD 및 발행/예약 → 관리자 페이지 연결
3. 스토리지 연동 (Supabase Storage) → 이미지/미디어 업로드 관리

즉, 데이터 모델 스케치와 마이그레이션은 모든 개발의 기반이자 앞으로 전개될 Armo 웹사이트의 심장과 같은 단계이다.

---

## 결론

Armo의 첫 번째 개발 단계는 단순히 테이블을 만드는 작업이 아니라, 작품과 굿즈를 어떻게 연결하고, 브랜드 경험을 어떻게 데이터 구조로 표현할 것인가를 설계하는 중요한 과정이다.